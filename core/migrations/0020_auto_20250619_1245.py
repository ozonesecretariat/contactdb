# Generated by Django 5.2.1 on 2025-06-19 12:45

import django_db_views.migration_functions
import django_db_views.operations
from django.db import migrations


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0019_update_contact_language"),
    ]

    operations = [
        django_db_views.operations.ViewRunPython(
            code=django_db_views.migration_functions.ForwardViewMigration(
                "SELECT\n                array_to_string(\n                    array_agg(duplicate_value ORDER BY duplicate_value), ','\n                ) AS id,\n                array_agg(\n                    duplicate_value ORDER BY duplicate_value\n                ) AS duplicate_values,\n                array_agg(\n                    duplicate_type ORDER BY duplicate_type\n                ) AS duplicate_fields,\n                contact_ids,\n                EXISTS(\n                    SELECT 1 FROM core_dismissedduplicatecontact as dd\n                    WHERE dd.contact_ids = duplicate_groups.contact_ids\n                ) AS is_dismissed\n            FROM (\n            SELECT 'Name'                         AS duplicate_type,\n                   concat('Name: ', concat(TRIM(LOWER(first_name)), ' ', TRIM(LOWER(last_name))))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(DISTINCT id) > 1\n         UNION ALL \n            SELECT 'Email'                         AS duplicate_type,\n                   concat('Email: ', TRIM(LOWER(unnest(emails))))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(DISTINCT id) > 1\n        ) AS duplicate_groups\n            GROUP BY contact_ids\n            ORDER BY id, contact_ids",
                "core_possibleduplicatecontact",
                engine="django.db.backends.postgresql",
            ),
            reverse_code=django_db_views.migration_functions.BackwardViewMigration(
                "SELECT \n                array_to_string(\n                    array_agg(duplicate_value ORDER BY duplicate_value), ','\n                ) AS id,  \n                array_agg(\n                    duplicate_value ORDER BY duplicate_value\n                ) AS duplicate_values,  \n                array_agg(\n                    duplicate_type ORDER BY duplicate_type\n                ) AS duplicate_fields,  \n                contact_ids,\n                EXISTS(\n                    SELECT 1 FROM core_dismissedduplicatecontact as dd\n                    WHERE dd.contact_ids = duplicate_groups.contact_ids\n                ) AS is_dismissed\n            FROM (\n            SELECT 'Name'                         AS duplicate_type, \n                   concat('Name: ', concat(TRIM(LOWER(first_name)), ' ', TRIM(LOWER(last_name))))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(1) > 1\n         UNION ALL \n            SELECT 'Email'                         AS duplicate_type, \n                   concat('Email: ', TRIM(LOWER(unnest(emails))))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(1) > 1\n        ) AS duplicate_groups\n            GROUP BY contact_ids\n            ORDER BY id, contact_ids",
                "core_possibleduplicatecontact",
                engine="django.db.backends.postgresql",
            ),
            atomic=False,
        ),
        django_db_views.operations.ViewRunPython(
            code=django_db_views.migration_functions.ForwardViewMigration(
                "SELECT\n                row_number() over ()    AS id,\n                unnest(contact_ids)     AS contact_id,\n                subq.id                 AS duplicate_values_id\n            FROM (\n            SELECT\n                array_to_string(\n                    array_agg(duplicate_value ORDER BY duplicate_value), ','\n                ) AS id,\n                array_agg(\n                    duplicate_value ORDER BY duplicate_value\n                ) AS duplicate_values,\n                array_agg(\n                    duplicate_type ORDER BY duplicate_type\n                ) AS duplicate_fields,\n                contact_ids,\n                EXISTS(\n                    SELECT 1 FROM core_dismissedduplicatecontact as dd\n                    WHERE dd.contact_ids = duplicate_groups.contact_ids\n                ) AS is_dismissed\n            FROM (\n            SELECT 'Name'                         AS duplicate_type,\n                   concat('Name: ', concat(TRIM(LOWER(first_name)), ' ', TRIM(LOWER(last_name))))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(DISTINCT id) > 1\n         UNION ALL \n            SELECT 'Email'                         AS duplicate_type,\n                   concat('Email: ', TRIM(LOWER(unnest(emails))))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(DISTINCT id) > 1\n        ) AS duplicate_groups\n            GROUP BY contact_ids\n            ORDER BY id, contact_ids\n        ) AS subq",
                "core_possibleduplicatecontactrelationship",
                engine="django.db.backends.postgresql",
            ),
            reverse_code=django_db_views.migration_functions.BackwardViewMigration(
                "SELECT \n                row_number() over ()    AS id,\n                unnest(contact_ids)     AS contact_id,  \n                subq.id                 AS duplicate_values_id\n            FROM (\n            SELECT \n                array_to_string(\n                    array_agg(duplicate_value ORDER BY duplicate_value), ','\n                ) AS id,  \n                array_agg(\n                    duplicate_value ORDER BY duplicate_value\n                ) AS duplicate_values,  \n                array_agg(\n                    duplicate_type ORDER BY duplicate_type\n                ) AS duplicate_fields,  \n                contact_ids,\n                EXISTS(\n                    SELECT 1 FROM core_dismissedduplicatecontact as dd\n                    WHERE dd.contact_ids = duplicate_groups.contact_ids\n                ) AS is_dismissed\n            FROM (\n            SELECT 'Name'                         AS duplicate_type, \n                   concat('Name: ', concat(TRIM(LOWER(first_name)), ' ', TRIM(LOWER(last_name))))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(1) > 1\n         UNION ALL \n            SELECT 'Email'                         AS duplicate_type, \n                   concat('Email: ', TRIM(LOWER(unnest(emails))))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(1) > 1\n        ) AS duplicate_groups\n            GROUP BY contact_ids\n            ORDER BY id, contact_ids\n        ) AS subq",
                "core_possibleduplicatecontactrelationship",
                engine="django.db.backends.postgresql",
            ),
            atomic=False,
        ),
    ]
