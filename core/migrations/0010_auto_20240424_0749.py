# Generated by Django 4.2.11 on 2024-04-24 07:49

from django.db import migrations
import django_db_views.migration_functions
import django_db_views.operations


class Migration(migrations.Migration):

    dependencies = [
        ("core", "0009_possibleduplicate_possibleduplicatecontact_and_more"),
    ]

    operations = [
        django_db_views.operations.ViewRunPython(
            code=django_db_views.migration_functions.ForwardViewMigration(
                "SELECT \n                array_to_string(array_agg(duplicate_value), ',')    AS id,  \n                array_agg(duplicate_value)                          AS duplicate_values,  \n                array_agg(duplicate_type)                           AS duplicate_fields,  \n                contact_ids                                         AS contact_ids,\n                EXISTS(\n                    SELECT 1 FROM core_dismissedduplicate \n                    WHERE core_dismissedduplicate.contact_ids = duplicate_groups.contact_ids\n                )                                                   AS is_dismissed\n            FROM (\n            SELECT 'Name'                         AS duplicate_type, \n                   concat('Name: ', concat(first_name, ' ', last_name))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(1) > 1\n         UNION ALL \n            SELECT 'Email'                         AS duplicate_type, \n                   concat('Email: ', unnest(emails))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(1) > 1\n         UNION ALL \n            SELECT 'Email Cc'                         AS duplicate_type, \n                   concat('Email Cc: ', unnest(email_ccs))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(1) > 1\n         UNION ALL \n            SELECT 'Phone'                         AS duplicate_type, \n                   concat('Phone: ', unnest(phones))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(1) > 1\n         UNION ALL \n            SELECT 'Mobile'                         AS duplicate_type, \n                   concat('Mobile: ', unnest(mobiles))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(1) > 1\n         UNION ALL \n            SELECT 'Fax'                         AS duplicate_type, \n                   concat('Fax: ', unnest(faxes))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(1) > 1\n        ) AS duplicate_groups\n            GROUP BY contact_ids",
                "core_possibleduplicate",
                engine="django.db.backends.postgresql",
            ),
            reverse_code=django_db_views.migration_functions.BackwardViewMigration(
                "", "core_possibleduplicate", engine="django.db.backends.postgresql"
            ),
            atomic=False,
        ),
        django_db_views.operations.ViewRunPython(
            code=django_db_views.migration_functions.ForwardViewMigration(
                "SELECT \n                row_number() over ()    AS id,\n                unnest(contact_ids)     AS contact_id,  \n                subq.id                 AS duplicate_values_id\n            FROM (\n            SELECT \n                array_to_string(array_agg(duplicate_value), ',')    AS id,  \n                array_agg(duplicate_value)                          AS duplicate_values,  \n                array_agg(duplicate_type)                           AS duplicate_fields,  \n                contact_ids                                         AS contact_ids,\n                EXISTS(\n                    SELECT 1 FROM core_dismissedduplicate \n                    WHERE core_dismissedduplicate.contact_ids = duplicate_groups.contact_ids\n                )                                                   AS is_dismissed\n            FROM (\n            SELECT 'Name'                         AS duplicate_type, \n                   concat('Name: ', concat(first_name, ' ', last_name))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(1) > 1\n         UNION ALL \n            SELECT 'Email'                         AS duplicate_type, \n                   concat('Email: ', unnest(emails))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(1) > 1\n         UNION ALL \n            SELECT 'Email Cc'                         AS duplicate_type, \n                   concat('Email Cc: ', unnest(email_ccs))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(1) > 1\n         UNION ALL \n            SELECT 'Phone'                         AS duplicate_type, \n                   concat('Phone: ', unnest(phones))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(1) > 1\n         UNION ALL \n            SELECT 'Mobile'                         AS duplicate_type, \n                   concat('Mobile: ', unnest(mobiles))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(1) > 1\n         UNION ALL \n            SELECT 'Fax'                         AS duplicate_type, \n                   concat('Fax: ', unnest(faxes))    AS duplicate_value,\n                   array_agg(id ORDER BY id)::int[]         AS contact_ids\n            FROM core_contact\n            GROUP BY duplicate_value\n            HAVING count(1) > 1\n        ) AS duplicate_groups\n            GROUP BY contact_ids\n        ) AS subq",
                "core_possibleduplicatecontact",
                engine="django.db.backends.postgresql",
            ),
            reverse_code=django_db_views.migration_functions.BackwardViewMigration(
                "",
                "core_possibleduplicatecontact",
                engine="django.db.backends.postgresql",
            ),
            atomic=False,
        ),
    ]
