"""
Django settings for contactdb project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import socket
from pathlib import Path

import environ
import pycountry
from import_export.formats.base_formats import DEFAULT_FORMATS

from common.docx_format import DOCX

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent

env = environ.Env()

if Path(str(BASE_DIR / ".env")).is_file():
    env.read_env(str(BASE_DIR / ".env"))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

HAS_HTTPS = env.bool("HAS_HTTPS", default=False)
PROTOCOL = "https://" if HAS_HTTPS else "http://"

BACKEND_HOST = env.list("BACKEND_HOST")
FRONTEND_HOST = env.list("FRONTEND_HOST", default=BACKEND_HOST)

MAIN_FRONTEND_HOST = env.str("MAIN_FRONTEND_HOST", default=FRONTEND_HOST[0])
MAIN_BACKEND_HOST = env.str("MAIN_BACKEND_HOST", default=BACKEND_HOST[0])

REDIS_HOST = env.str("REDIS_HOST")
REDIS_PORT = env.int("REDIS_PORT", default=6379)
REDIS_CACHE_DB = 0
REDIS_TASK_DB = 1
# https://django-health-check.readthedocs.io/en/latest/readme.html#installation
REDIS_URL = f"redis://{REDIS_HOST}:{REDIS_PORT}"

# https://docs.djangoproject.com/en/4.1/ref/settings/#std-setting-DEBUG
DEBUG = env.bool("DEBUG", default=False)

# https://docs.djangoproject.com/en/4.1/ref/settings/#std-setting-SECRET_KEY
SECRET_KEY = env.str("SECRET_KEY")

# https://github.com/jazzband/django-fernet-encrypted-fields
SALT_KEY = env.str("SALT_KEY")

# https://docs.djangoproject.com/en/4.1/ref/settings/#std-setting-CSRF_COOKIE_SECURE
CSRF_COOKIE_SECURE = HAS_HTTPS

# https://docs.djangoproject.com/en/4.1/ref/settings/#std-setting-SECURE_SSL_REDIRECT
SECURE_SSL_REDIRECT = HAS_HTTPS

# https://docs.djangoproject.com/en/4.1/ref/settings/#secure-proxy-ssl-header
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")

# https://docs.djangoproject.com/en/4.1/ref/settings/#std-setting-SESSION_COOKIE_SECURE
SESSION_COOKIE_SECURE = HAS_HTTPS

# https://docs.djangoproject.com/en/4.1/ref/settings/#allowed-hosts
ALLOWED_HOSTS = [_host.rsplit(":", 1)[0] for _host in BACKEND_HOST + FRONTEND_HOST]

# https://pypi.org/project/django-cors-headers/
CORS_ORIGIN_WHITELIST = [(PROTOCOL + _host) for _host in FRONTEND_HOST]
CORS_ALLOW_CREDENTIALS = True
CORS_EXPOSE_HEADERS = ["content-disposition"]
CSRF_TRUSTED_ORIGINS = CORS_ORIGIN_WHITELIST


# Application definition

INSTALLED_APPS = [
    "django_admin_env_notice",
    # "django.contrib.admin",
    "contactdb.site.ContactDBAdminConfig",
    "ckeditor",
    "ckeditor_uploader",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.postgres",
    "django_extensions",
    "django_filters",
    "django_otp",
    "django_otp.plugins.otp_static",
    "django_otp.plugins.otp_totp",
    "constance",
    "constance.backends.database",
    "two_factor",
    "django_rq",
    "django_task",
    "admin_auto_filters",
    "import_export",
    "django_group_model",
    "django_db_views",
    "django_object_actions",
    "auditlog",
    "rest_framework",
    "rest_framework.authtoken",
    "drf_spectacular",
    "drf_spectacular_sidecar",
    "corsheaders",
    "more_admin_filters",
    "health_check",
    "health_check.db",
    "health_check.contrib.redis",
    # This app
    "api.apps.ApiConfig",
    "accounts.apps.AccountsConfig",
    "core.apps.CoreConfig",
    "events.apps.EventsConfig",
    "emails.apps.EmailsConfig",
    "django.forms",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "django_otp.middleware.OTPMiddleware",
    "auditlog.middleware.AuditlogMiddleware",
    "djangorestframework_camel_case.middleware.CamelCaseMiddleWare",
]

# https://django-auditlog.readthedocs.io/en/latest/usage.html#settings
AUDITLOG_INCLUDE_ALL_MODELS = True
AUDITLOG_EXCLUDE_TRACKING_MODELS = ("sessions",)


ROOT_URLCONF = "contactdb.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "django_admin_env_notice.context_processors.from_settings",
                "django.template.context_processors.request",
            ],
        },
    },
]

MAIN_FIXTURES_DIR = BASE_DIR / "fixtures"
TEST_FIXTURES_DIR = MAIN_FIXTURES_DIR / "test"

FIXTURE_DIRS = [MAIN_FIXTURES_DIR]

WSGI_APPLICATION = "contactdb.wsgi.application"

# https://docs.djangoproject.com/en/4.1/ref/settings/#std-setting-AUTH_USER_MODEL
AUTH_USER_MODEL = "accounts.User"

# https://pypi.org/project/django-group-model/
AUTH_GROUP_MODEL = "accounts.Role"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

POSTGRES_HOST = env.str("POSTGRES_HOST")
POSTGRES_PORT = env.int("POSTGRES_PORT", default=5432)
POSTGRES_DB = env.str("POSTGRES_DB")
POSTGRES_USER = env.str("POSTGRES_USER")
POSTGRES_PASSWORD = env.str("POSTGRES_PASSWORD")

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": POSTGRES_DB,
        "HOST": POSTGRES_HOST,
        "PORT": POSTGRES_PORT,
        "USER": POSTGRES_USER,
        "PASSWORD": POSTGRES_PASSWORD,
        "CONN_MAX_AGE": None,
        "CONN_HEALTH_CHECKS": True,
    },
}

# Caching
# https://docs.djangoproject.com/en/4.2/ref/settings/#caches
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f"redis://{REDIS_HOST}:{REDIS_PORT}/{REDIS_CACHE_DB}",
        "OPTIONS": {
            "SOCKET_TIMEOUT": 5,
            "SOCKET_CONNECT_TIMEOUT": 5,
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
        "KEY_PREFIX": "contactdb",
    }
}

# Task Queue (RQ)

RQ_QUEUES = {
    "default": {
        "HOST": REDIS_HOST,
        "PORT": REDIS_PORT,
        "DB": REDIS_TASK_DB,
    }
}

# Hide RQ admin, since we are using Django Task models instead
RQ_SHOW_ADMIN_LINK = False


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

USE_L10N = False

# See https://docs.djangoproject.com/en/4.1/ref/templates/builtins/#date
DATETIME_FORMAT = "d N Y, H:i O"
SHORT_DATETIME_FORMAT = "d-m-Y, H:i"
DATE_FORMAT = "d N Y"
SHORT_DATE_FORMAT = "d-m-Y"
TIME_FORMAT = "H:i:s"

# https://docs.djangoproject.com/en/4.0/ref/settings/#login-url
# LOGIN_URL = "/admin/login"
LOGIN_URL = "two_factor:login"
LOGIN_REDIRECT_URL = "admin:index"
LOGOUT_REDIRECT_URL = "admin:index"

FS_DIR = BASE_DIR / ".fs"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "/static/"
STATIC_ROOT = FS_DIR / "static"
STATICFILES_DIRS = [BASE_DIR / "static"]

# Media files / user uploads
# https://docs.djangoproject.com/en/4.1/howto/static-files/#serving-files-uploaded-by-a-user-during-development
MEDIA_URL = "/media/"
MEDIA_ROOT = FS_DIR / "media"

PROTECTED_MEDIA_URL = "/protected_media/"
PROTECTED_MEDIA_ROOT = FS_DIR / "protected_media"
CKEDITOR_UPLOAD_PATH = "uploads/"

STORAGES = {
    "default": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
    },
    "staticfiles": {
        "BACKEND": "django.contrib.staticfiles.storage.ManifestStaticFilesStorage",
    },
    "protected": {
        "BACKEND": "django.core.files.storage.FileSystemStorage",
        "OPTIONS": {
            "location": PROTECTED_MEDIA_ROOT,
            "base_url": PROTECTED_MEDIA_URL,
        },
    },
}


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# EMAIL
# https://docs.djangoproject.com/en/4.0/ref/settings/#email-backend
EMAIL_BACKEND = env.str(
    "EMAIL_BACKEND", default="django.core.mail.backends.smtp.EmailBackend"
)
# https://docs.djangoproject.com/en/4.0/ref/settings/#email-host
EMAIL_HOST = env.str("EMAIL_HOST", default="localhost")
# https://docs.djangoproject.com/en/4.0/ref/settings/#email-port
EMAIL_PORT = env.str("EMAIL_PORT", default="25")
# https://docs.djangoproject.com/en/4.0/ref/settings/#email-host-user
EMAIL_HOST_USER = env.str("EMAIL_HOST_USER", default="")
# https://docs.djangoproject.com/en/4.0/ref/settings/#email-host-password
EMAIL_HOST_PASSWORD = env.str("EMAIL_HOST_PASSWORD", default="")
# https://docs.djangoproject.com/en/4.0/ref/settings/#std:setting-email-use-tls
EMAIL_USE_TLS = env.bool("EMAIL_USE_TLS", default=False)
# https://docs.djangoproject.com/en/4.0/ref/settings/#email-timeout
EMAIL_TIMEOUT = env.int("EMAIL_TIMEOUT", default=30)
# https://docs.djangoproject.com/en/4.0/ref/settings/#std:setting-DEFAULT_FROM_EMAIL
DEFAULT_FROM_EMAIL = env.str("DEFAULT_FROM_EMAIL", default="") or (
    "noreply@" + socket.gethostname()
)

# https://pypi.org/project/django-admin-env-notice/
ENVIRONMENT_NAME = env.str("ENVIRONMENT_NAME", default="")
ENVIRONMENT_COLOR = env.str("ENVIRONMENT_COLOR", default="")
ENVIRONMENT_TEXT_COLOR = env.str("ENVIRONMENT_TEXT_COLOR", default="#ffffff")

# https://django-constance.readthedocs.io/en/latest/
CONSTANCE_BACKEND = "constance.backends.database.DatabaseBackend"
CONSTANCE_CONFIG = {
    "REQUIRE_2FA": (
        False,
        "Require two-factor authentication. Users will not be able to use "
        "the application until they complete the 2FA setup.",
    ),
}
CONSTANCE_CONFIG_FIELDSETS = (
    (
        "Security",
        {
            "collapse": False,
            "fields": ("REQUIRE_2FA",),
        },
    ),
)

# Import/Export Settings
# https://django-import-export.readthedocs.io/en/stable/installation.html#settings
IMPORT_EXPORT_IMPORT_PERMISSION_CODE = "add"
IMPORT_EXPORT_EXPORT_PERMISSION_CODE = "view"
IMPORT_EXPORT_CHUNK_SIZE = 1000

IMPORT_EXPORT_FORMATS = DEFAULT_FORMATS + [DOCX]

# Sentry
SENTRY_DSN = env.str("SENTRY_DSN", default="")

if SENTRY_DSN:
    import sentry_sdk
    from sentry_sdk.integrations.django import DjangoIntegration

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        environment=ENVIRONMENT_NAME,
        integrations=[
            DjangoIntegration(),
        ],
    )

FORM_RENDERER = "django.forms.renderers.TemplatesSetting"


# CKEditor
# Placeholders for contacts
CKEDITOR_CONTACT_PLACEHOLDERS = {
    "full_name": {"attr": "full_name"},
    "first_name": {"attr": "first_name"},
    "last_name": {"attr": "last_name"},
    "title": {"attr": "title"},
    "party": {"attr": "organization__government__name"},
    "organization": {"attr": "organization__name"},
}

# Placeholders for event invitations
CKEDITOR_INVITATION_PLACEHOLDERS = {
    "invitation_link": {"attr": "invitation_link_html"},
    # The party attribute can come from different fields depending on situation
    "party": {
        "attr": "country__name",
        "fallback": "organization__country__name",
    },
}

CKEDITOR_PLACEHOLDERS = [
    *CKEDITOR_CONTACT_PLACEHOLDERS.keys(),
    *CKEDITOR_INVITATION_PLACEHOLDERS.keys(),
]


CKEDITOR_CONFIGS = {
    "default": {
        "toolbar": [
            {
                "name": "document",
                "items": [
                    "placeholder_select",
                    "Templates",
                    "Preview",
                    "Source",
                ],
            },
            {
                "name": "clipboard",
                "items": [
                    # "Cut",
                    # "Copy",
                    # "Paste",
                    # "PasteText",
                    # "PasteFromWord",
                    # "-",
                    "Undo",
                    "Redo",
                ],
            },
            {
                "name": "paragraph",
                "items": [
                    "NumberedList",
                    "BulletedList",
                    "-",
                    "Outdent",
                    "Indent",
                    "Blockquote",
                    "-",
                    "JustifyLeft",
                    "JustifyCenter",
                    "JustifyRight",
                    "JustifyBlock",
                    "-",
                    "BidiLtr",
                    "BidiRtl",
                ],
            },
            {
                "name": "editing",
                "items": [
                    "Find",
                    "Replace",
                    "-",
                    "SelectAll",
                    # "-",
                    # "Scayt",
                ],
            },
            {
                "name": "insert",
                "items": [
                    "Image",
                    "Table",
                    "HorizontalRule",
                    "Smiley",
                    "SpecialChar",
                ],
            },
            {"name": "about", "items": ["About"]},
            "/",
            {
                "name": "basicstyles",
                "items": [
                    "Bold",
                    "Italic",
                    "Underline",
                    "Strike",
                    "Subscript",
                    "Superscript",
                    "-",
                    "CopyFormatting",
                    "RemoveFormat",
                ],
            },
            {"name": "styles", "items": ["Styles", "Format", "Font", "FontSize"]},
            {"name": "colors", "items": ["TextColor", "BGColor"]},
            {"name": "links", "items": ["Link", "Unlink"]},
            {"name": "tools", "items": ["Maximize", "ShowBlocks"]},
        ],
        "extraPlugins": "placeholder,placeholder_select,templates",
        "placeholder_select": {
            "placeholders": CKEDITOR_PLACEHOLDERS,
        },
        "templates_files": [
            "/static/js/ckeditor_templates.js",
        ],
    },
}
# Using separate configs for regular and invitation emails
# Configuration for regular emails
CKEDITOR_CONFIGS["email_editor"] = {
    **CKEDITOR_CONFIGS["default"],
    # Only overriding the placeholders
    "placeholder_select": {
        "placeholders": list(CKEDITOR_CONTACT_PLACEHOLDERS.keys()),
    },
}
# Configuration for invitation emails
CKEDITOR_CONFIGS["invitation_editor"] = {
    **CKEDITOR_CONFIGS["default"],
    # Only overriding the placeholders
    "placeholder_select": {
        "placeholders": list(CKEDITOR_INVITATION_PLACEHOLDERS.keys()),
    },
}

### Django Rest Framework
REST_FRAMEWORK = {
    "DEFAULT_PAGINATION_CLASS": "api.pagination.PageNumberPagination",
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_PERMISSION_CLASSES": ("api.permissions.DjangoModelPermissions",),
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
    "DEFAULT_RENDERER_CLASSES": (
        "djangorestframework_camel_case.render.CamelCaseJSONRenderer",
        "djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer",
    ),
    "DEFAULT_PARSER_CLASSES": (
        # "djangorestframework_camel_case.parser.CamelCaseFormParser",
        # "djangorestframework_camel_case.parser.CamelCaseMultiPartParser",
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
    ),
    "JSON_UNDERSCOREIZE": {
        "no_underscore_before_number": True,
        "ignore_keys": ("__all__",),
    },
}

# https://dj-rest-auth.readthedocs.io/en/latest/configuration.html
REST_AUTH = {
    "USER_DETAILS_SERIALIZER": "api.serializers.user.UserSerializer",
    "PASSWORD_RESET_SERIALIZER": "api.serializers.user.PasswordResetSerializer",
    "OLD_PASSWORD_FIELD_ENABLED": True,
}

# https://drf-spectacular.readthedocs.io/en/latest/readme.html#installation
SPECTACULAR_SETTINGS = {
    "TITLE": "ContactDB API",
    "DESCRIPTION": "ContactDB API",
    "VERSION": None,
    "SERVE_INCLUDE_SCHEMA": True,
    "SWAGGER_UI_DIST": "SIDECAR",  # shorthand to use the sidecar instead
    "SWAGGER_UI_FAVICON_HREF": "SIDECAR",
    "REDOC_DIST": "SIDECAR",
    "POSTPROCESSING_HOOKS": [
        "drf_spectacular.hooks.postprocess_schema_enums",
        "drf_spectacular.contrib.djangorestframework_camel_case.camelize_serializer_fields",
    ],
    "CAMELIZE_NAMES": True,
}

### App settings

# Kronos import
ACCOUNTS_HOST = env.str("ACCOUNTS_HOST", default="")
KRONOS_HOST = env.str("KRONOS_HOST", default="")

# Ozone
KRONOS_USERNAME = env.str("KRONOS_USERNAME", default="")
KRONOS_PASSWORD = env.str("KRONOS_PASSWORD", default="")

FILE_UPLOAD_MAX_MEMORY_SIZE = env.int("FILE_UPLOAD_MAX_MEMORY_SIZE", 2621440)

# Focal point imports
FOCAL_POINT_ENDPOINT = "https://ors.ozone.unep.org/api/country-profiles/focal-points/"

# Add EU ISO code which is exceptionally reserved.
pycountry.countries.add_entry(alpha_2="EU", name="European Union")

### Debug settings

DJANGO_DEBUG_TOOLBAR = env.bool("DJANGO_DEBUG_TOOLBAR", default=True)


if DEBUG:
    INTERNAL_IPS = ["127.0.0.1"]

    if DJANGO_DEBUG_TOOLBAR:
        INSTALLED_APPS += ["debug_toolbar"]

    if DEBUG and DJANGO_DEBUG_TOOLBAR:
        import socket

        def show_toolbar(request):
            return (
                DEBUG
                and (
                    request.META.get("REMOTE_ADDR") in INTERNAL_IPS
                    or request.META.get("HTTP_X_REAL_IP") in INTERNAL_IPS
                )
                and not request.GET.get("iframe")
            )

        hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
        INTERNAL_IPS += [".".join(ip.split(".")[:-1] + ["1"]) for ip in ips]
        MIDDLEWARE.insert(2, "debug_toolbar.middleware.DebugToolbarMiddleware")
        DEBUG_TOOLBAR_CONFIG = {
            "SHOW_COLLAPSED": True,
            "SHOW_TOOLBAR_CALLBACK": f"{__name__}.show_toolbar",
        }

    AUTH_PASSWORD_VALIDATORS = [
        {
            "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
            "OPTIONS": {
                "min_length": 4,
            },
        },
    ]
